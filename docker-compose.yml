version: '3.8'

services:
  productivity-hub:
    build: .
    container_name: productivity-hub-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
    volumes:
      - app_data:/app/backend
      - ./logs:/var/log/productivity-hub
    depends_on:
      - db
    networks:
      - productivity-hub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15-alpine
    container_name: productivity-hub-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: productivity_hub
      POSTGRES_USER: productivity_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - productivity-hub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U productivity_user -d productivity_hub"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: productivity-hub-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/productivity-hub.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/dist:/usr/share/nginx/html
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - productivity-hub
    networks:
      - productivity-hub-network

  # Optional: Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: productivity-hub-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - productivity-hub-network
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  app_data:
  redis_data:

networks:
  productivity-hub-network:
    driver: bridge